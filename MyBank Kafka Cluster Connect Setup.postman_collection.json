{
	"info": {
		"_postman_id": "d48f680a-c9e0-4253-aa72-62443a806f6f",
		"name": "MyBank Kafka Cluster Connect Setup",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ConfigConnectorSetup SOURCE",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"arctype-connector\",\r\n    \"config\": {\r\n        \"connector.class\": \"io.debezium.connector.postgresql.PostgresConnector\",\r\n        \"tasks.max\": \"1\",\r\n        \"plugin.name\": \"pgoutput\",\r\n        \"database.hostname\": \"db\",\r\n        \"database.port\": \"5432\",\r\n        \"database.user\": \"postgres\",\r\n        \"database.password\": \"arctype\",\r\n        \"database.dbname\": \"postgres\",\r\n        \"database.server.name\": \"BANKDB\",\r\n        \"key.converter.schemas.enable\": \"false\",\r\n        \"value.converter.schemas.enable\": \"false\",\r\n        \"snapshot.mode\": \"never\",\r\n        \"topic.prefix\": \"payments\",\r\n        \"topic.suffix\": \"avro\",\r\n        \"key.converter\": \"io.confluent.connect.avro.AvroConverter\",\r\n        \"value.converter\": \"io.confluent.connect.avro.AvroConverter\",\r\n        \"key.converter.schema.registry.url\": \"http://schema-registry:8081\",\r\n        \"value.converter.schema.registry.url\": \"http://schema-registry:8081\"        \r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8083/connectors",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8083",
					"path": [
						"connectors"
					]
				}
			},
			"response": []
		},
		{
			"name": "ConfigConnectorSetup SINK SUM",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\" : \"jdbc-sum-revenue-sink\",\r\n  \"config\" : {\r\n    \"connector.class\" : \"io.confluent.connect.jdbc.JdbcSinkConnector\",\r\n    \"key.converter\" : \"io.confluent.connect.avro.AvroConverter\",\r\n    \"value.converter\" : \"io.confluent.connect.avro.AvroConverter\",\r\n    \"topics\" : \"PAYMENTS_SUM_AGGREGATOR_TABLE\",\r\n    \"transforms\" : \"unwrap\",\r\n    \"connection.url\" : \"jdbc:postgresql://targetdb:5432/postgres?user=postgres&password=postgres\",\r\n    \"pk.fields\" : \"id\",\r\n    \"auto.create\" : \"true\",\r\n    \"auto.evolve\" : \"true\",\r\n    \"transforms.unwrap.drop.tombstones\" : \"false\",\r\n    \"transforms.unwrap.type\" : \"io.debezium.transforms.ExtractNewRecordState\",\r\n    \"value.converter.schema.registry.url\" : \"http://schema-registry:8081\",\r\n    \"key.converter.schemas.enable\" : \"false\",\r\n    \"value.converter.schemas.enable\" : \"false\",\r\n    \"key.converter.schema.registry.url\" : \"http://schema-registry:8081\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8083/connectors",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8083",
					"path": [
						"connectors"
					]
				}
			},
			"response": []
		},
		{
			"name": "ConfigConnectorSetup SINK SUM UPSERT",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\" : \"jdbc-sum-revenue-sink\",\r\n  \"config\" : {\r\n    \"connector.class\" : \"io.confluent.connect.jdbc.JdbcSinkConnector\",\r\n    \"key.converter\" : \"io.confluent.connect.avro.AvroConverter\",\r\n    \"value.converter\" : \"io.confluent.connect.avro.AvroConverter\",\r\n    \"topics\" : \"PAYMENTS_SUM_AGGREGATOR_TABLE\",\r\n    \"transforms\" : \"unwrap\",\r\n    \"connection.url\" : \"jdbc:postgresql://targetdb:5432/postgres?user=postgres&password=postgres\",\r\n    \"insert.mode\" : \"upsert\",\r\n    \"pk.mode\" : \"record_value\",\r\n    \"pk.fields\" : \"INSURANCE_TYPE\",\r\n    \"auto.create\" : \"true\",\r\n    \"auto.evolve\" : \"true\",\r\n    \"transforms.unwrap.drop.tombstones\" : \"false\",\r\n    \"transforms.unwrap.type\" : \"io.debezium.transforms.ExtractNewRecordState\",\r\n    \"value.converter.schema.registry.url\" : \"http://schema-registry:8081\",\r\n    \"key.converter.schemas.enable\" : \"false\",\r\n    \"value.converter.schemas.enable\" : \"false\",\r\n    \"key.converter.schema.registry.url\" : \"http://schema-registry:8081\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8083/connectors",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8083",
					"path": [
						"connectors"
					]
				}
			},
			"response": []
		},
		{
			"name": "KSQLDB show streams",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"ksql\": \"show streams;\",\r\n  \"streamProperties\":{}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8088/ksql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8088",
					"path": [
						"ksql"
					]
				}
			},
			"response": []
		},
		{
			"name": "KSQLDB show tables",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"ksql\": \"show tables;\",\r\n  \"streamProperties\":{}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8088/ksql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8088",
					"path": [
						"ksql"
					]
				}
			},
			"response": []
		},
		{
			"name": "KSQLDB Create Stream",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"ksql\": \"CREATE STREAM PAYMENT_AGGREGATOR_EXTRACTOR_STREAM (after STRUCT<payment_id INTEGER, insurance_type INTEGER, total DOUBLE>) WITH (kafka_topic='payments.public.insurance_payments', value_format='avro', KEY_FORMAT='AVRO');\",\r\n  \"streamsProperties\": {\r\n    \"ksql.streams.auto.offset.reset\": \"earliest\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8088/ksql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8088",
					"path": [
						"ksql"
					]
				}
			},
			"response": []
		},
		{
			"name": "KSQLDB Drop Stream",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"ksql\": \"DROP STREAM PAYMENT_AGGREGATOR_EXTRACTOR_STREAM ;\",\r\n  \"streamsProperties\": {\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8088/ksql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8088",
					"path": [
						"ksql"
					]
				}
			},
			"response": []
		},
		{
			"name": "KSQLDB Create Table",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"ksql\": \"CREATE TABLE PAYMENTS_SUM_AGGREGATOR_TABLE WITH (VALUE_FORMAT='AVRO',KEY_FORMAT='AVRO') AS SELECT AFTER->insurance_type AS id, MAX(AFTER->payment_id) counter, AS_VALUE(AFTER->insurance_type) insurance_type, SUM(AFTER->TOTAL) AS TOTAL FROM PAYMENT_AGGREGATOR_EXTRACTOR_STREAM GROUP BY (AFTER->insurance_type);\",\r\n  \"streamsProperties\": {\r\n    \"ksql.streams.auto.offset.reset\": \"earliest\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8088/ksql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8088",
					"path": [
						"ksql"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		}
	]
}